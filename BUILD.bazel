load("@aspect_rules_ts//ts:defs.bzl", "ts_config")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("@bazel_skylib//lib:partial.bzl", "partial")
load("@aspect_rules_swc//swc:defs.bzl", "swc")
load("@hedron_compile_commands//:refresh_compile_commands.bzl", "refresh_compile_commands")



npm_link_all_packages(name = "node_modules")

ts_config(
    name = "ts_config",
    src  = "tsconfig.json",
    visibility = [":__subpackages__"],
)

ts_project(
    name = "main",
    srcs = ["src/web/index.ts",
            "src/web/evaluator.ts",
            "src/web/evaluator_factory.ts",
            "src/web/evaluator_native.ts",
            "src/web/evaluator_wasm.ts",
            "src/web/platforms.ts",
            "src/web/utility.ts",
            "src/web/async/pipe.ts",
            "src/web/async/message.ts"],
    data = [
        "//src/eval/spaces/node_native_space:node_native_space",
        "//src/eval/spaces/wasm_space:wasm-space-cc",
    ],
    transpiler = partial.make(
        swc,
        swcrc = ".swcrc"),
    declaration = True,
    tsconfig = "//:ts_config",
    deps = ["//:node_modules"],
    visibility = ["__subpackages__"],
)

refresh_compile_commands(
    name = "refresh_compile_commands",

    # Specify the targets of interest.
    # For example, specify a dict of targets and any flags required to build.
    targets = {
        "//src/eval/basis:basis": "",
        "//src/eval/basis/misc:misc-unittest": "",
        "//src/eval/spaces/wasm_space:wasm-space-cc": "",
        "//...": "",
    },
    # No need to add flags already in .bazelrc. They're automatically picked up.
    # If you don't need flags, a list of targets is also okay, as is a single target string.
    # Wildcard patterns, like //... for everything, *are* allowed here, just like a build.
      # As are additional targets (+) and subtractions (-), like in bazel query https://docs.bazel.build/versions/main/query.html#expressions
    # And if you're working on a header-only library, specify a test or binary target that compiles it.
)
